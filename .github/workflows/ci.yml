name: CI

on:
  pull_request:
  push:
    branches:
      - 'staging'
      - 'trying'
      - 'master'

jobs:
  static_analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          components: clippy

      - name: Install dprint
        run: |
          curl -fsSL https://dprint.dev/install.sh | sh
          echo "/home/runner/.dprint/bin" >> $GITHUB_PATH

      - name: Check formatting
        run: dprint check

      - name: Run clippy with default features
        run: cargo clippy --workspace --all-targets -- -D warnings

      - name: Run clippy with all features
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

  ui_e2e_test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./waves
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Set up environment and build binaries
        run: |
          ./e2e_test_setup.sh

      - name: Run test
        run: |
          yarn run cypress run

      - name: Extract docker logs
        if: failure()
        run: |
          - docker logs liquid-e2e-test > liquid.log
          - docker logs electrs-liquid > electrs.log
          - docker logs esplora-liquid > esplora.log

      - name: Archive logs
        uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: Logfiles
          path: |
            ./waves/bobtimus.log
            ./waves/liquid.log
            ./waves/electrs.log
            ./waves/esplora.log

      - name: Archive cypress video
        uses: actions/upload-artifact@v2
        with:
          name: cypress-video
          path: |
            ./waves/cypress/videos/e2e.spec.ts.mp4

  fuzz:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cache honggfuzz
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/cargo-honggfuzz
            ~/.cargo/bin/cargo-hfuzz
          key: ubuntu-rust-${{ env.RUST_TOOLCHAIN }}-honggfuzz-0.5.51

      - name: Install honggfuzz
        run: which cargo-honggfuzz && which cargo-hfuzz || cargo install honggfuzz --version 0.5.51

      - name: Install fuzz dependencies
        run: |
          sudo apt-get -qq update
          sudo apt-get install -y binutils-dev libunwind8-dev

      - name: Fuzz
        run: |
          cd ./elements-fun/fuzz
          ./fuzz.sh

      - name: Upload fuzz workspace on failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: hfuzz_workspace
          path: ./elements-fun/fuzz/hfuzz_workspace

  build_test_workspace:
    strategy:
      matrix:
        target: [ x86_64-unknown-linux-gnu, x86_64-apple-darwin ]
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ matrix.os }}-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Cargo test (all workspace)
        if: matrix.os == 'ubuntu-latest'
        run: cargo test --workspace --all-features

      - name: Cargo build (all workspace without elements-fuzz )
        if: matrix.os == 'macos-latest'
        run: cargo build --workspace --exclude elements-fuzz --all-features

  swap_wasm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: swap-wasm-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Cargo build
        run: cargo build -p swap --target wasm32-unknown-unknown

  waves_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: wasm-wallet-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Cache node_modules directory
        uses: actions/cache@v2
        with:
          path: |
            waves/node_modules
            ~/.config/wasm-pack-nodejs
          key: node-modules-directory-${{ hashFiles('waves/yarn.lock') }}-v2

      - name: React tests
        run: |
          cd waves
          yarn install
          yarn run build
          yarn run test

  wallet_buildscript_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ matrix.os }}-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Build wallet with default configuration
        run: cargo test -p wallet constants_tests

      - name: Build wallet with custom configuration
        run: cargo test -p wallet constants_tests
        env:
          NATIVE_ASSET_TICKER: FOO-BTC
          NATIVE_ASSET_ID: 2dcf5a8834645654911964ec3602426fd3b9b4017554d3f9c19403e7fc1411d3
          ESPLORA_API_URL: http://localhost:3000/
          CHAIN: ELEMENTS
          DEFAULT_FEE_PER_VBYTE: 13.37

  wasm_wallet_test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true
          target: wasm32-unknown-unknown

      - name: Cache target directory
        uses: actions/cache@v2
        with:
          path: target
          key: wasm-wallet-target-directory-${{ hashFiles('Cargo.lock') }}-v1

      - name: Cache wasm-bindgen-test-runner
        uses: actions/cache@v2
        with:
          path: ~/.cargo/bin/wasm-bindgen-test-runner
          key: ubuntu-rust-${{ env.RUST_TOOLCHAIN }}-wasm-bindgen-test-runner

      - name: Install wasm-bindgen-test-runner
        run: which wasm-bindgen-test-runner || cargo install wasm-bindgen-cli

      - name: Waves wallet tests
        run: |
          cd waves/wallet
          cargo test --target wasm32-unknown-unknown

      - name: Upload artifact on test failure
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: wasm-wallet-test-binary
          path: ./target/wasm32-unknown-unknown/debug/deps/wallet-*.wasm
